package nobugs.team.shopping.db.entity;

import de.greenrobot.dao.DaoException;
import nobugs.team.shopping.db.DaoSession;
import nobugs.team.shopping.db.dao.ProductTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PRODUCT_TYPE.
 */
public class ProductType {

    private Integer id;
    private String name;
    private String imgurl;
    private Integer parentid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductTypeDao myDao;

    private ProductType productType;
    private Integer productType__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ProductType() {
    }

    public ProductType(Integer id) {
        this.id = id;
    }

    public ProductType(Integer id, String name, String imgurl, Integer parentid) {
        this.id = id;
        this.name = name;
        this.imgurl = imgurl;
        this.parentid = parentid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductTypeDao() : null;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImgurl() {
        return imgurl;
    }

    public void setImgurl(String imgurl) {
        this.imgurl = imgurl;
    }

    public Integer getParentid() {
        return parentid;
    }

    public void setParentid(Integer parentid) {
        this.parentid = parentid;
    }

    /** To-one relationship, resolved on first access. */
    public ProductType getProductType() {
        Integer __key = this.parentid;
        if (productType__resolvedKey == null || !productType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductTypeDao targetDao = daoSession.getProductTypeDao();
            ProductType productTypeNew = targetDao.load(__key);
            synchronized (this) {
                productType = productTypeNew;
            	productType__resolvedKey = __key;
            }
        }
        return productType;
    }

    public void setProductType(ProductType productType) {
        synchronized (this) {
            this.productType = productType;
            parentid = productType == null ? null : productType.getId();
            productType__resolvedKey = parentid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
