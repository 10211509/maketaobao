package nobugs.team.shopping.repo.db.entity;

import de.greenrobot.dao.DaoException;
import nobugs.team.shopping.repo.db.DaoSession;
import nobugs.team.shopping.repo.db.dao.OrderDao;
import nobugs.team.shopping.repo.db.dao.ProductDao;
import nobugs.team.shopping.repo.db.dao.ShopDao;
import nobugs.team.shopping.repo.db.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ORDER.
 */
public class OrderPo {

    private Integer id;
    private Integer productcount;
    private Double price;
    private String createtime;
    private Integer productid;
    private Integer shopid;
    private Integer userid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OrderDao myDao;

    private ProductPo productPo;
    private Integer product__resolvedKey;

    private ShopPo shopPo;
    private Integer shop__resolvedKey;

    private UserPo userPo;
    private Integer user__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public OrderPo() {
    }

    public OrderPo(Integer id) {
        this.id = id;
    }

    public OrderPo(Integer id, Integer productcount, Double price, String createtime, Integer productid, Integer shopid, Integer userid) {
        this.id = id;
        this.productcount = productcount;
        this.price = price;
        this.createtime = createtime;
        this.productid = productid;
        this.shopid = shopid;
        this.userid = userid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderDao() : null;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getProductcount() {
        return productcount;
    }

    public void setProductcount(Integer productcount) {
        this.productcount = productcount;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public String getCreatetime() {
        return createtime;
    }

    public void setCreatetime(String createtime) {
        this.createtime = createtime;
    }

    public Integer getProductid() {
        return productid;
    }

    public void setProductid(Integer productid) {
        this.productid = productid;
    }

    public Integer getShopid() {
        return shopid;
    }

    public void setShopid(Integer shopid) {
        this.shopid = shopid;
    }

    public Integer getUserid() {
        return userid;
    }

    public void setUserid(Integer userid) {
        this.userid = userid;
    }

    /** To-one relationship, resolved on first access. */
    public ProductPo getProductPo() {
        Integer __key = this.productid;
        if (product__resolvedKey == null || !product__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            ProductPo productPoNew = targetDao.load(__key);
            synchronized (this) {
                productPo = productPoNew;
            	product__resolvedKey = __key;
            }
        }
        return productPo;
    }

    public void setProductPo(ProductPo productPo) {
        synchronized (this) {
            this.productPo = productPo;
            productid = productPo == null ? null : productPo.getId();
            product__resolvedKey = productid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ShopPo getShopPo() {
        Integer __key = this.shopid;
        if (shop__resolvedKey == null || !shop__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShopDao targetDao = daoSession.getShopDao();
            ShopPo shopPoNew = targetDao.load(__key);
            synchronized (this) {
                shopPo = shopPoNew;
            	shop__resolvedKey = __key;
            }
        }
        return shopPo;
    }

    public void setShopPo(ShopPo shopPo) {
        synchronized (this) {
            this.shopPo = shopPo;
            shopid = shopPo == null ? null : shopPo.getId();
            shop__resolvedKey = shopid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public UserPo getUserPo() {
        Integer __key = this.userid;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            UserPo userPoNew = targetDao.load(__key);
            synchronized (this) {
                userPo = userPoNew;
            	user__resolvedKey = __key;
            }
        }
        return userPo;
    }

    public void setUserPo(UserPo userPo) {
        synchronized (this) {
            this.userPo = userPo;
            userid = userPo == null ? null : userPo.getId();
            user__resolvedKey = userid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
