package nobugs.team.shopping.repo.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import nobugs.team.shopping.repo.db.DaoSession;
import nobugs.team.shopping.repo.db.entity.OrderPo;
import nobugs.team.shopping.repo.db.entity.ProductPo;
import nobugs.team.shopping.repo.db.entity.ShopPo;
import nobugs.team.shopping.repo.db.entity.UserPo;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER.
*/
public class OrderDao extends AbstractDao<OrderPo, Integer> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity OrderPo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Productcount = new Property(1, Integer.class, "productcount", false, "PRODUCTCOUNT");
        public final static Property Price = new Property(2, Double.class, "price", false, "PRICE");
        public final static Property Createtime = new Property(3, String.class, "createtime", false, "CREATETIME");
        public final static Property Productid = new Property(4, Integer.class, "productid", false, "PRODUCTID");
        public final static Property Shopid = new Property(5, Integer.class, "shopid", false, "SHOPID");
        public final static Property Userid = new Property(6, Integer.class, "userid", false, "USERID");
    };

    private DaoSession daoSession;


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'PRODUCTCOUNT' INTEGER," + // 1: productcount
                "'PRICE' REAL," + // 2: price
                "'CREATETIME' TEXT," + // 3: createtime
                "'PRODUCTID' INTEGER," + // 4: productid
                "'SHOPID' INTEGER," + // 5: shopid
                "'USERID' INTEGER);"); // 6: userid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderPo entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer productcount = entity.getProductcount();
        if (productcount != null) {
            stmt.bindLong(2, productcount);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(3, price);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(4, createtime);
        }
 
        Integer productid = entity.getProductid();
        if (productid != null) {
            stmt.bindLong(5, productid);
        }
 
        Integer shopid = entity.getShopid();
        if (shopid != null) {
            stmt.bindLong(6, shopid);
        }
 
        Integer userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(7, userid);
        }
    }

    @Override
    protected void attachEntity(OrderPo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderPo readEntity(Cursor cursor, int offset) {
        OrderPo entity = new OrderPo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // productcount
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createtime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // productid
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // shopid
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // userid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderPo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setProductcount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPrice(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setCreatetime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setShopid(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUserid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(OrderPo entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(OrderPo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getShopDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM ORDER T");
            builder.append(" LEFT JOIN PRODUCT T0 ON T.'PRODUCTID'=T0.'ID'");
            builder.append(" LEFT JOIN SHOP T1 ON T.'SHOPID'=T1.'ID'");
            builder.append(" LEFT JOIN USER T2 ON T.'USERID'=T2.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OrderPo loadCurrentDeep(Cursor cursor, boolean lock) {
        OrderPo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ProductPo productPo = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
        entity.setProductPo(productPo);
        offset += daoSession.getProductDao().getAllColumns().length;

        ShopPo shopPo = loadCurrentOther(daoSession.getShopDao(), cursor, offset);
        entity.setShopPo(shopPo);
        offset += daoSession.getShopDao().getAllColumns().length;

        UserPo userPo = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUserPo(userPo);

        return entity;    
    }

    public OrderPo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OrderPo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OrderPo> list = new ArrayList<OrderPo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OrderPo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OrderPo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
